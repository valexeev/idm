package web

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	_ "idm/docs"
	"idm/inner/common"
)

// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
type Server struct {
	App           *fiber.App
	GroupApi      fiber.Router
	GroupApiV1    fiber.Router
	GroupInternal fiber.Router
	logger        *common.Logger
}

type AuthMiddlewareInterface interface {
	ProtectWithJwt() func(*fiber.Ctx) error
}

// —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
func NewServer(logger *common.Logger) *Server {
	// —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
	app := fiber.New()
	// üëâ –ø–æ–¥–∫–ª—é—á–∞–µ–º middleware
	RegisterMiddleware(app)
	// –ø–æ–¥–∫–ª—é—á–∞–µ–º swagger
	app.Get("/swagger/*", swagger.HandlerDefault)
	// —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—ã
	groupInternal := app.Group("/internal")
	groupApi := app.Group("/api")

	// –ü—Ä–∏–º–µ–Ω—è–µ–º AuthMiddleware –∫ API –≥—Ä—É–ø–ø–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ)
	groupApi.Use(func(c *fiber.Ctx) error {
		return CreateAuthMiddleware(logger)(c)
	})

	groupApiV1 := groupApi.Group("/v1")

	return &Server{
		App:           app,
		GroupApi:      groupApi,
		GroupApiV1:    groupApiV1,
		GroupInternal: groupInternal,
		logger:        logger,
	}
}
