// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	"context"
	role "idm/inner/role"

	mock "github.com/stretchr/testify/mock"
)

// Svc is an autogenerated mock type for the Svc type
type Svc struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, name
func (_m *Svc) Add(ctx context.Context, name string) (role.Response, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 role.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (role.Response, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) role.Response); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(role.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *Svc) DeleteById(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIds provides a mock function with given fields: ctx, ids
func (_m *Svc) DeleteByIds(ctx context.Context, ids []int64) error {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *Svc) FindAll(ctx context.Context) ([]role.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []role.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]role.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []role.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]role.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *Svc) FindById(ctx context.Context, id int64) (role.Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 role.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (role.Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) role.Response); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(role.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIds provides a mock function with given fields: ctx, ids
func (_m *Svc) FindByIds(ctx context.Context, ids []int64) ([]role.Response, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []role.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]role.Response, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []role.Response); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]role.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRequest provides a mock function with given fields: request
func (_m *Svc) ValidateRequest(request interface{}) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSvc creates a new instance of Svc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *Svc {
	mock := &Svc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
